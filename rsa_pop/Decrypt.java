
import java.math.BigInteger;
import java.util.*;

class Decrypt {
    public static void main(String[] args) {
        BigInteger n = new BigInteger(
                "23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239"
        );
        BigInteger p = new BigInteger(
                "153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433"
        );
        BigInteger e = new BigInteger(
                "65537"
        );
        BigInteger cipher = new BigInteger(
                "9276182891752530901219927412073143671948875482138883542938401204867776171605127572134036444953137790745003888189443976475578120144429490705784649507786686788217321344885844827647654512949354661973611664872783393501992112464825441330961457628758224011658785082995945612195073191601952238361315820373373606643521463466376095236371778984942891123936191796720097900593599447528583257806196551724676380135110693228330934418147759387990754368525068685861547977993085149359162754890674487823080750579601100854795031284533864826255207300350679553486505961837349042778851010569582458629638648589442067576234798724906377157351"
        );
        BigInteger d = findD_no_q(p, n, e);
        System.out.println(d.toString());
    }

    /*
    mod inverse is the func for d
     */
    static BigInteger findD(BigInteger q, BigInteger p, BigInteger e) {
        BigInteger d;
        BigInteger p_1 = p.subtract(new BigInteger("1"));
        BigInteger q_1 = q.subtract(new BigInteger("1"));
        d = e.modInverse(p_1.multiply(q_1));
        return d;
    }


    /*
    156408916769576372285319235535320446340733908943564048157238512311891352879208957302116527435165097143521156600690562005797819820759620198602417583539668686152735534648541252847927334505648478214810780526425005943955838623325525300844493280040860604499838598837599791480284496210333200247148213274376422459183
     */

    static BigInteger findD_no_q(BigInteger p, BigInteger n, BigInteger e) {
        BigInteger q = n.divide(p);
        System.out.println(q.toString());
        BigInteger p_1 = p.subtract(new BigInteger("1"));
        BigInteger q_1 = q.subtract(new BigInteger("1"));
        return e.modInverse(p_1.multiply(q_1));
    }

    /*
    decrypt algorithm:
    m = c^d*(mod n)
    d is private exp.
     */
/*    static BigInteger decrypt(BigInteger p, BigInteger n, BigInteger e, BigInteger cipher) {
        BigInteger d = findD_no_q(p, n, e);
        BigInteger ciphExp = Pow(cipher, d);
        return ciphExp.mod(n);
    }*/

    /*
    encrypt algorithm:
    c = m^e*(mod n)
    where c is ciphertext
    m is plaintext
    e and n rep. public key
     */

//
//
//    static BigInteger Pow(BigInteger value, BigInteger exponent)
//    {
//        BigInteger originalValue = value;
//        while (exponent.subtract(BigInteger.ONE).compareTo()BigInteger.ONE)
//            value = value.multiply(originalValue);
//        return value;
//    }
}

/*
p : 153143042272527868798412612417204434156935146874282990942386694020462861918068684561281763577034706600608387699148071015194725533394126069826857182428660427818277378724977554365910231524827258160904493774748749088477328204812171935987088715261127321911849092207070653272176072509933245978935455542420691737433
ciphertext : 9276182891752530901219927412073143671948875482138883542938401204867776171605127572134036444953137790745003888189443976475578120144429490705784649507786686788217321344885844827647654512949354661973611664872783393501992112464825441330961457628758224011658785082995945612195073191601952238361315820373373606643521463466376095236371778984942891123936191796720097900593599447528583257806196551724676380135110693228330934418147759387990754368525068685861547977993085149359162754890674487823080750579601100854795031284533864826255207300350679553486505961837349042778851010569582458629638648589442067576234798724906377157351
e : 65537
n : 23952937352643527451379227516428377705004894508566304313177880191662177061878993798938496818120987817049538365206671401938265663712351239785237507341311858383628932183083145614696585411921662992078376103990806989257289472590902167457302888198293135333083734504191910953238278860923153746261500759411620299864395158783509535039259714359526738924736952759753503357614939203434092075676169179112452620687731670534906069845965633455748606649062394293289967059348143206600765820021392608270528856238306849191113241355842396325210132358046616312901337987464473799040762271876389031455051640937681745409057246190498795697239
##### PRODUCE THE FOLLOWING ####
plaintext

 */