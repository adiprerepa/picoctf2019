from gmpy2 import *

# In theory you would do
# M = C^d % n
# but the problem implies d and e were 
# swapped, so to decrypt you would
# only need e, and they give it to
# us, so M = C^e % N?

C = 3036007966128239047184653914034117188457632188841996108175794415850298887270846932886971003017256942373467401886168896710239046113302709398917019572817794206285101581572129329897751524496452358695681970685098022727996973080177794987223947431438351779837002911153692430434055200019165237074017221018413260246

N = 82824093568685842698819605020178161762094844939448630643827868139701388282049403185705380475278955563032058333530926996866535688569899629589279995960438418974910472666256708104060137143856097297132983729617635789328960739126671284935725440609923910949402021944231203268880659074422575971666804466557418399621

E = 33325775476543718387595907416911029276079787922139560707352196207393161252386327753895522882236081270078816214584288949866038209066454876364028159565997232376271465602690507063469318154338058953642333234200165769808419161051906884561211107903640109075643250027483219269033464479794514758176286104287093281793


d = pow(mpz(C), mpz(E), mpz(N))
print(d)
