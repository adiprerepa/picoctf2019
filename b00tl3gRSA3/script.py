n=20270204821245344213086131831279120760623992336587595116199974475202481725348389756676261598779805799866831536803366704271536629229281099487389479853291797179906813503001270699260539719186873572652668200541231185608266358384792010424128398060590162282592943837927638217159144043316816367888633285272096479451342390737364324073987870856460153739
c=1939239724938119725151639834208999618479172284370053981452017053937897577979597250856089957969324898128993780628620643762543967623865747706192153692031061791616862569134735208969046686880915586949981735192240723858324052700634174572424804474904478076651214960074737077373580148918838345281535460978124607456857546066374894857058802284056237113
e=65537
z = 1
# factors of n
k = "8642126891×8654865871×8922317653×9790914587×9800015741×9884895401×10065389249×10202258629×10209125669×10284207149×10340765243×11580705007×11674272061×11970469631×11971865981×12104187107×12332991169×12437207137×12876928937×13096876813×13412239171×14319819817×14580158311×14854517219×14937905617×15286926041×15485203463×15591786667×15614459453×16372830041×16503782389×16751357647×17049632101×17132158861"
k = k.split("×")
k = k[:-1]
ans = []
for i in range(len(k)):
  z*= int(k[i])
  ans.append(int(k[i]))

last = "9844834466984410238760508341426539641274824152974126355698113416963328741345172818420529473*1556166378747246661455607650467579787890668777215473880481278454917241506443567748322450737071991178190872343027*1323103111548942686126043825748974134439981167780272881983283733693804351579802973107472937448613673517431518090301546074134445277071984644809"
last = last.split("*")
for i in range(len(last)):
  z *= int(last[i])
  ans.append(int(last[i]))

p = ans
d = 1

def egcd(a, b):
  if (a == 0):
    return [b, 0 ,1]
  else :
    g, y, x = egcd(b % a, a)
    return [g, x - (b // a) * y, y]

def modInv(a, m):
  g, x, y = egcd(a, m)
  if (g != 1):
    raise Exception("[-]No modular multiplicative inverse of %d under modulus %d" % (a, m))
  else :
    return x % m

phy = 1
for a in p:
  phy *= (a-1)

d = modInv(e, phy)
m = pow(c, d, n)
print(hex(m)[2:])


